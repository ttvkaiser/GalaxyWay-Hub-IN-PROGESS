--// Services
local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")
local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

--// Create ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "KeySystemUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

--// Add blur effect
local blur = Instance.new("BlurEffect")
blur.Size = 35
blur.Name = "NebulaHubBlur"
blur.Parent = Lighting

--// Main Frame
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 400, 0, 250)
frame.Position = UDim2.new(0.5, -200, 0.5, -125)
frame.BackgroundColor3 = Color3.fromRGB(46, 27, 73)
frame.BorderSizePixel = 0
frame.Parent = screenGui

--// Rounded corners
local uiCorner = Instance.new("UICorner")
uiCorner.CornerRadius = UDim.new(0, 15)
uiCorner.Parent = frame

--// Title
local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, -40, 0, 30)
title.Position = UDim2.new(0, 20, 0, 10)
title.BackgroundTransparency = 1
title.Text = "Nebula Hub - <b>Key System</b>"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.Font = Enum.Font.GothamBold
title.TextSize = 20
title.RichText = true
title.Parent = frame

--// Dragging logic
local dragging, dragInput, dragStart, startPos

local function update(input)
	local delta = input.Position - dragStart
	frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

title.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragStart = input.Position
		startPos = frame.Position
		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)

title.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
		dragInput = input
	end
end)

title.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = false
		dragInput = nil
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if input == dragInput and dragging then
		update(input)
	end
end)

--// Close button
local closeButton = Instance.new("TextButton")
closeButton.Size = UDim2.new(0, 30, 0, 30)
closeButton.Position = UDim2.new(1, -35, 0, 5)
closeButton.Text = "Ã—"
closeButton.Font = Enum.Font.GothamBold
closeButton.TextSize = 50
closeButton.TextColor3 = Color3.fromRGB(255, 80, 80)
closeButton.BackgroundTransparency = 1
closeButton.Parent = frame

closeButton.MouseButton1Click:Connect(function()
	local blur = Lighting:FindFirstChild("NebulaHubBlur")
	if blur then blur:Destroy() end
	screenGui:Destroy()
end)

--// Info Text
local info = Instance.new("TextLabel")
info.Size = UDim2.new(1, -40, 0, 40)
info.Position = UDim2.new(0, 20, 0, 50)
info.Text = "The Key will last until I personally TTVKAISER change it\nSo Enjoy Our Script!!"
info.TextColor3 = Color3.fromRGB(180, 180, 255)
info.BackgroundTransparency = 1
info.TextSize = 14
info.Font = Enum.Font.Gotham
info.TextWrapped = true
info.TextYAlignment = Enum.TextYAlignment.Top
info.Parent = frame

--// Input box
local textbox = Instance.new("TextBox")
textbox.Size = UDim2.new(1, -40, 0, 40)
textbox.Position = UDim2.new(0, 20, 0, 110)
textbox.PlaceholderText = "Enter Your Key.."
textbox.Text = ""
textbox.TextSize = 16
textbox.Font = Enum.Font.Gotham
textbox.TextColor3 = Color3.new(1, 1, 1)
textbox.BackgroundColor3 = Color3.fromRGB(74, 97, 164)
textbox.BorderSizePixel = 0
textbox.Parent = frame

--// Check Key Button
local checkButton = Instance.new("TextButton")
checkButton.Size = UDim2.new(0.5, -25, 0, 40)
checkButton.Position = UDim2.new(0, 20, 1, -60)
checkButton.Text = "Check Key"
checkButton.Font = Enum.Font.GothamBold
checkButton.TextSize = 16
checkButton.TextColor3 = Color3.new(1, 1, 1)
checkButton.BackgroundColor3 = Color3.fromRGB(72, 155, 207)
checkButton.BorderSizePixel = 0
checkButton.Parent = frame

--// Get Key Button
local getKeyButton = Instance.new("TextButton")
getKeyButton.Size = UDim2.new(0.5, -25, 0, 40)
getKeyButton.Position = UDim2.new(0.5, 5, 1, -60)
getKeyButton.Text = "Get Key"
getKeyButton.Font = Enum.Font.GothamBold
getKeyButton.TextSize = 16
getKeyButton.TextColor3 = Color3.new(1, 1, 1)
getKeyButton.BackgroundColor3 = Color3.fromRGB(74, 97, 164)
getKeyButton.BorderSizePixel = 0
getKeyButton.Parent = frame

--// Rounded Corners
for _, element in ipairs({textbox, checkButton, getKeyButton}) do
	local uicorner = Instance.new("UICorner")
	uicorner.CornerRadius = UDim.new(0, 6)
	uicorner.Parent = element
end

-- Inside the "Check Key" button callback:
checkButton.MouseButton1Click:Connect(function()
	if textbox.Text == "NebulaHub_111" then
		local blur = Lighting:FindFirstChild("NebulaHubBlur")
		if blur then blur:Destroy() end
		screenGui:Destroy()

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Nebula Hub | Fisch | Version " .. Fluent.Version,
    SubTitle = "by ttvkaiser",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Amethyst",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Home = Window:AddTab({ Title = "| Home", Icon = "home" }),
    Main2 = Window:AddTab({ Title = "| Main 2", Icon = "align-justify" }),
    Auto = Window:AddTab({ Title = "| Automatically", Icon = "play" }),
    Inventory = Window:AddTab({ Title = "| Inventory", Icon = "backpack" }),
    Shop = Window:AddTab({ Title = "| Shop", Icon = "shopping-bag" }),
    Quest = Window:AddTab({ Title = "| Quest", Icon = "file-question" }),
    Teleport = Window:AddTab({ Title = "| Teleport", Icon = "map-pin" }),
    Miscellaneous = Window:AddTab({ Title = "| Miscellaneous", Icon = "command" }),
    Settings = Window:AddTab({ Title = "| Settings", Icon = "settings" })
}

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "Notification",
        Content = "This is a notification",
        SubContent = "SubContent", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })



    Tabs.Main:AddParagraph({
        Title = "Paragraph",
        Content = "This is a paragraph.\nSecond line!"
    })



    Tabs.Main:AddButton({
        Title = "Button",
        Description = "Very important button",
        Callback = function()
            Window:Dialog({
                Title = "Title",
                Content = "This is a dialog",
                Buttons = {
                    {
                        Title = "Confirm",
                        Callback = function()
                            print("Confirmed the dialog.")
                        end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                            print("Cancelled the dialog.")
                        end
                    }
                }
            })
        end
    })

    local Slider = Tabs.Main:AddSlider("Slider", {
        Title = "Slider",
        Description = "This is a slider",
        Default = 2,
        Min = 0,
        Max = 5,
        Rounding = 1,
        Callback = function(Value)
            print("Slider was changed:", Value)
        end
    })

    Slider:OnChanged(function(Value)
        print("Slider changed:", Value)
    end)

    Slider:SetValue(3)



    local Dropdown = Tabs.Main:AddDropdown("Dropdown", {
        Title = "Dropdown",
        Values = {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen"},
        Multi = false,
        Default = 1,
    })

    Dropdown:SetValue("four")

    Dropdown:OnChanged(function(Value)
        print("Dropdown changed:", Value)
    end)


    
    local MultiDropdown = Tabs.Main:AddDropdown("MultiDropdown", {
        Title = "Dropdown",
        Description = "You can select multiple values.",
        Values = {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen"},
        Multi = true,
        Default = {"seven", "twelve"},
    })

    MultiDropdown:SetValue({
        three = true,
        five = true,
        seven = false
    })

    MultiDropdown:OnChanged(function(Value)
        local Values = {}
        for Value, State in next, Value do
            table.insert(Values, Value)
        end
        print("Mutlidropdown changed:", table.concat(Values, ", "))
    end)



    local Colorpicker = Tabs.Main:AddColorpicker("Colorpicker", {
        Title = "Colorpicker",
        Default = Color3.fromRGB(96, 205, 255)
    })

    Colorpicker:OnChanged(function()
        print("Colorpicker changed:", Colorpicker.Value)
    end)
    
    Colorpicker:SetValueRGB(Color3.fromRGB(0, 255, 140))



    local TColorpicker = Tabs.Main:AddColorpicker("TransparencyColorpicker", {
        Title = "Colorpicker",
        Description = "but you can change the transparency.",
        Transparency = 0,
        Default = Color3.fromRGB(96, 205, 255)
    })

    TColorpicker:OnChanged(function()
        print(
            "TColorpicker changed:", TColorpicker.Value,
            "Transparency:", TColorpicker.Transparency
        )
    end)



    local Keybind = Tabs.Main:AddKeybind("Keybind", {
        Title = "KeyBind",
        Mode = "Toggle", -- Always, Toggle, Hold
        Default = "LeftControl", -- String as the name of the keybind (MB1, MB2 for mouse buttons)

        -- Occurs when the keybind is clicked, Value is `true`/`false`
        Callback = function(Value)
            print("Keybind clicked!", Value)
        end,

        -- Occurs when the keybind itself is changed, `New` is a KeyCode Enum OR a UserInputType Enum
        ChangedCallback = function(New)
            print("Keybind changed!", New)
        end
    })

    -- OnClick is only fired when you press the keybind and the mode is Toggle
    -- Otherwise, you will have to use Keybind:GetState()
    Keybind:OnClick(function()
        print("Keybind clicked:", Keybind:GetState())
    end)

    Keybind:OnChanged(function()
        print("Keybind changed:", Keybind.Value)
    end)

    task.spawn(function()
        while true do
            wait(1)

            -- example for checking if a keybind is being pressed
            local state = Keybind:GetState()
            if state then
                print("Keybind is being held down")
            end

            if Fluent.Unloaded then break end
        end
    end)

    Keybind:SetValue("MB2", "Toggle") -- Sets keybind to MB2, mode to Hold


    local Input = Tabs.Main:AddInput("Input", {
        Title = "Input",
        Default = "Default",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(Value)
            print("Input changed:", Value)
        end
    })

    Input:OnChanged(function()
        print("Input updated:", Input.Value)
    end)
end

local player = game.Players.LocalPlayer

local function updateWalkspeed(speed)
	local character = player.Character or player.CharacterAdded:Wait()
	local humanoid = character:FindFirstChildOfClass("Humanoid")
 	   if humanoid then
 	       humanoid.WalkSpeed = speed
	    end
end

Tabs.Home:AddButton({
    Title = "Discord Server",
    Description = "Copy this link for Nebula Hub Main Server!",
    Callback = function()
        local discordInvite = "https://discord.gg/vbDZd8Km"

        if setclipboard then
            setclipboard(discordInvite)
        else
            warn("Clipboard access is not supported in this environment.")
        end

        Window:Dialog({
            Title = "Discord Link Copied",
            Content = "The invite link has been copied to your clipboard.",
            Buttons = {
                {
                    Title = "OK",
                    Callback = function()
                        print("User acknowledged the dialog.")
                    end
                }
            }
        })
    end
})

local Slider = Tabs.Home:AddSlider("Slider", {
    Title = "Set Walkspeed [BETA]",
    Description = "Setting your walking speed making you go fast or slow. P.S. max is 500",
    Default = 2,
    Min = 16,
    Max = 500,
    Rounding = 1,
    Callback = function(Value)
        print("Slider was changed:", Value)
        updateWalkspeed(Value)
    end
})


-- allows the user to jump and infinite times
local player = game.Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")

-- Variable to track toggle state
local infiniteJumpEnabled = false

-- Connect jump request listener
UserInputService.JumpRequest:Connect(function()
    if infiniteJumpEnabled then
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end)

-- Your existing toggle code
local Toggle = Tabs.Home:AddToggle("MyToggle", {
    Title = "Infinite Jumps",
    Default = false
})

Toggle:OnChanged(function()
    infiniteJumpEnabled = Options.MyToggle.Value
    print("Toggle changed:", infiniteJumpEnabled)
end)

-- Optional: Set initial state manually if needed
Options.MyToggle:SetValue(false)

    Tabs.Main2:AddParagraph({
        Title = "ABOUT AUTO FISHING!",
        Content = "This is Auto Fishing is still in development!"
    })

local Toggle2 = Tabs.Main2:AddToggle("SecondToggle", {
Title = "Auto Fish [IN TESTING]",
Default = false
})

Toggle2:OnChanged(function()
local isEnabled = Options.SecondToggle.Value
print("SecondToggle changed:", isEnabled)
-- Your logic for what this second toggle should do
end)

Options.SecondToggle:SetValue(false)

local Dropdown2 = Tabs.Teleport:AddDropdown("TeleportDropdown", {
    Title = "Teleport Islands!",
    Values = {"moosewood", "roslit", "forsaken", "ancientisle", "enchantaltar"},
    Multi = false,
    Default = 1,
})

Dropdown2:SetValue("Spawn")

Dropdown2:OnChanged(function(Value)
    print("Dropdown changed:", Value)

    -- Teleport locations
    local teleportLocations = {
        moosewood = Vector3.new(390.6, 135.5, 271),
        roslit = Vector3.new(-1476.4, 133.5, 671.7),
        forsaken = Vector3.new(-2498.2, 136.9, 1624.9),
        ancientisle = Vector3.new(6056.1, 195.3, 278.7),
        enchantaltar = Vector3.new(1310.7, -805.3, -103.5),
        -- Add the rest as needed
    }

    local targetPosition = teleportLocations[Value]
    if targetPosition then
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        if character and character:FindFirstChild("HumanoidRootPart") then
            character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            print("Teleported to:", targetPosition)
        end
    else
        print("Invalid teleport location!")
    end
end)

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Helper function to get all player names (excluding yourself)
local function getPlayerNames()
    local names = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(names, player.Name)
        end
    end
    return names
end

-- === Third Dropdown (Teleport to Players) ===
local Dropdown3 = Tabs.Teleport:AddDropdown("TeleportDropdown", {
    Title = "Teleport to Player",
    Values = getPlayerNames(),
    Multi = false,
    Default = 1,
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

local noclipConnection

local Toggle3 = Tabs.Home:AddToggle("MyToggle3", {
    Title = "No Clip",
    Default = false
})

-- Helper function to get the current character
local function getCharacter()
    return LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
end

Toggle3:OnChanged(function()
    if Options.MyToggle3.Value then
        -- Enable NoClip
        noclipConnection = RunService.Stepped:Connect(function()
            local Character = getCharacter()
            for _, part in pairs(Character:GetDescendants()) do
                if part:IsA("BasePart") and part.CanCollide then
                    part.CanCollide = false
                end
            end
        end)
        print("NoClip enabled")
    else
        -- Disable NoClip
        if noclipConnection then
            noclipConnection:Disconnect()
            noclipConnection = nil
        end

        local Character = getCharacter()
        for _, part in pairs(Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
            end
        end
        print("NoClip disabled")
    end
end)

Options.MyToggle3:SetValue(false)



-- Update list if players join or leave
Players.PlayerAdded:Connect(function()
    Dropdown3:SetValues(getPlayerNames())
end)

Players.PlayerRemoving:Connect(function()
    Dropdown3:SetValues(getPlayerNames())
end)

-- Teleport to selected player
Dropdown3:OnChanged(function(targetName)
    local targetPlayer = Players:FindFirstChild(targetName)
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        LocalPlayer.Character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 3, 0)
    end
end)

Tabs.Micellaneous:AddButton({
    Title = "Become Invisible",
    Description = "Makes your character visually invisible. You can't undo the effect. /n ITS ONLY VISUAL",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Transparency = 1
                if part:FindFirstChild("face") then
                    part.face.Transparency = 1
                end
            elseif part:IsA("Decal") then
                part.Transparency = 1
            elseif part:IsA("Accessory") and part:FindFirstChild("Handle") then
                part.Handle.Transparency = 1
            end
        end

        print("You are now invisible.")
    end
})

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:
